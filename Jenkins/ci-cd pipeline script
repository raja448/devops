==Working Pipeline Script====

node {
    
stage('Git CheckOut') {    
git url: 'https://github.com/raja448/devops.git'
}


def project_path = "atmosphere/spring-boot-samples/spring-boot-sample-atmosphere"
dir(project_path) {

stage('Clean Old Packages') {
sh label: 'Clean', script: 'mvn clean'
}
stage('Maven Compile') {
sh label: 'Comile', script: 'mvn compile'
}
stage('Maven Test') {
sh label: 'Testing', script: 'mvn test'
}

stage('Maven Package') {
sh label: 'Testing', script: 'mvn package'
}
stage('sonar analasys'){
                withSonarQubeEnv('sonar'){
                    sh 'mvn sonar:sonar'
            }
        }
stage('Jfrog Artifacory'){
    script{
        def server = Artifactory.server 'Jfrog'
        def uploadSpec = """{
             "files": [
            {
                 "pattern": "**/*.jar",
                "target": "atom"
            }
        ]
        }"""
        server.upload(uploadSpec)
    }
}


stage('Archive Package') {
archive 'target/*.jar'
}
stage('Deploy Code info Docker Env.') {
sh label: 'master', script: 'docker-compose up -d --build'
}
   
stage('Geting Ready For Ansible') {
sh label: 'master', script: 'cp -rf target/*.jar ../../../terraform/ansible/templates/atmosphere-v1.jar'
sh label: 'master', script: "echo '<h1> TASK BUILD ID: ${env.BUILD_DISPLAY_NAME}</h1>' > ../../../terraform/ansible/templates/jenkins.html"
}   
    
stage('Deploy to Prod.') {
def project_path_1 = "../../../terraform"
dir(project_path_1) {    
sh label: 'master', script: 'terraform  init'
sh label: 'master', script: 'terraform  apply -input=false -auto-approve'
}   
}   
    
}    
}
